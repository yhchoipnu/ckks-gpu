#ifndef CLMP_CLH_
#define CLMP_CLH_

#include "clmp/clmp_param.h"

#define CLMP_LIMB_BYTES (CLMP_LIMB_LEN * sizeof(clmp_limb_t))
#define CLMP_LIMB_BITS  (CLMP_LIMB_BYTES * 8)
#define CLMP_NAIL_BITS  0
#define CLMP_NUMB_BITS  (CLMP_LIMB_BITS - CLMP_NAIL_BITS)
#define CLMP_NUMB_MASK  ((~ __CLMP_CAST (CLmp_limb_t, 0)) >> CLMP_NAIL_BITS)
#define CLMP_NUMB_MAX   CLMP_NUMB_MASK
#define CLMP_NAIL_MASK  (~ CLMP_NUMB_MASK)

#define CLMP_SIGN_POS   1
#define CLMP_SIGN_NEG   -1

#define CLMP_BOOL_TRUE  1
#define CLMP_BOOL_FALSE 0

#define __CLMP_CAST(type, expr) ((type) (expr))

typedef char               clmp_uint8;
typedef int                clmp_int32;
typedef long               clmp_int64;
typedef unsigned int       clmp_uint32;
typedef unsigned long      clmp_uint64;

typedef clmp_uint32         clmp_limb_t;
typedef clmp_int32          clmp_limb_signed_t;

typedef clmp_int64          clmp_bitcnt_t;

typedef clmp_uint64         clmp_size_t;
typedef clmp_int64          clmp_exp_t;

typedef clmp_limb_t         *clmp_ptr;
typedef const clmp_limb_t   *clmp_srcptr;

typedef struct __attribute__ ((packed)) {
    clmp_limb_t __limb[CLMP_LIMB_LEN];
} __clmpz_struct;

typedef __global __clmpz_struct          *clmpz_ptr, clmpz_t[1];
typedef const __global __clmpz_struct    *clmpz_srcptr;

typedef union {
    double d;
    clmp_uint64 l;
} __clmp_double_cast_struct;

typedef __clmp_double_cast_struct clmp_double;

void clmp_memcpy(__global void *, __global const void *, clmp_size_t);
void clmp_memcpy_global_to_local(void *, __global const void *, clmp_size_t);
void clmp_memcpy_local_to_global(__global void *, const void *, clmp_size_t);
void clmp_memcpy_local_to_local(void *, const void *, clmp_size_t);

void clmp_memset(__global void *, clmp_uint8, clmp_size_t);
void clmp_memset_local(void *, clmp_uint8, clmp_size_t);

clmp_uint32 clmp_rand(clmp_uint64);

void clmpz_set(clmpz_ptr, clmpz_srcptr);
void clmpz_set_ui(clmpz_ptr, clmp_uint32);
void clmpz_set_ul(clmpz_ptr, clmp_uint64);
void clmpz_set_i(clmpz_ptr, clmp_int32);
void clmpz_set_li(clmpz_ptr, clmp_int64);

clmp_bitcnt_t clmpz_bits_limb(const clmp_limb_t *);

clmp_bitcnt_t clmpz_bits(clmpz_srcptr);

void clmpz_bit_and_limb(clmp_limb_t *, const clmp_limb_t *, const clmp_limb_t *);
void clmpz_bit_or_limb(clmp_limb_t *, const clmp_limb_t *, const clmp_limb_t *);
void clmpz_bit_xor_limb(clmp_limb_t *, const clmp_limb_t *, const clmp_limb_t *);

void clmpz_bit_and(clmpz_ptr, clmpz_srcptr, clmpz_srcptr);
void clmpz_bit_or(clmpz_ptr, clmpz_srcptr, clmpz_srcptr);
void clmpz_bit_xor(clmpz_ptr, clmpz_srcptr, clmpz_srcptr);

void clmpz_shift_left_limb_ui(clmp_limb_t *, const clmp_limb_t *, clmp_uint32);
void clmpz_shift_right_limb_ui(clmp_limb_t *, const clmp_limb_t *, clmp_uint32);

void clmpz_shift_left_ui(clmpz_ptr, clmpz_srcptr, clmp_uint32);
void clmpz_shift_right_ui(clmpz_ptr, clmpz_srcptr, clmp_uint32);

clmp_int32 clmpz_sign(clmpz_srcptr);

clmp_int32 clmpz_cmp_limb(const clmp_limb_t *, const clmp_limb_t *);
clmp_int32 clmpz_cmp(clmpz_srcptr, clmpz_srcptr);

clmp_int32 clmpz_is_zero_limb(clmp_limb_t *);
clmp_int32 clmpz_is_zero(clmpz_srcptr);

void clmpz_neg_limb(clmp_limb_t *, const clmp_limb_t *);
void clmpz_neg(clmpz_ptr, clmpz_srcptr);

void clmpz_add_limb(clmp_limb_t *, const clmp_limb_t *, const clmp_limb_t *);
void clmpz_add_limb_ui(clmp_limb_t *, const clmp_limb_t *, const clmp_uint32);
void clmpz_add_limb_ul(clmp_limb_t *, const clmp_limb_t *, const clmp_uint64);

void clmpz_add(clmpz_ptr, clmpz_srcptr, clmpz_srcptr);
void clmpz_add_ui(clmpz_ptr, clmpz_srcptr, const clmp_uint32);
void clmpz_add_ul(clmpz_ptr, clmpz_srcptr, const clmp_uint64);

void clmpz_sub_limb(clmp_limb_t *, const clmp_limb_t *, const clmp_limb_t *);
void clmpz_sub_limb_ui(clmp_limb_t *, const clmp_limb_t *, const clmp_uint32);
void clmpz_sub_limb_ul(clmp_limb_t *, const clmp_limb_t *, const clmp_uint64);

void clmpz_sub(clmpz_ptr, clmpz_srcptr, clmpz_srcptr);
void clmpz_sub_ui(clmpz_ptr, clmpz_srcptr, clmp_uint32);
void clmpz_sub_ul(clmpz_ptr, clmpz_srcptr, clmp_uint64);

void clmpz_mul_limb(clmp_limb_t *, const clmp_limb_t *, const clmp_limb_t *);

void clmpz_mul(clmpz_ptr, clmpz_srcptr, clmpz_srcptr);
void clmpz_mul_ui(clmpz_ptr, clmpz_srcptr, clmp_uint32);
void clmpz_mul_ul(clmpz_ptr, clmpz_srcptr, clmp_uint64);

void clmpz_div_limb(clmp_limb_t *, const clmp_limb_t *, const clmp_limb_t *);

void clmpz_div(clmpz_ptr, clmpz_srcptr, clmpz_srcptr);
void clmpz_div_ui(clmpz_ptr, clmpz_srcptr, clmp_uint32);
void clmpz_div_ul(clmpz_ptr, clmpz_srcptr, clmp_uint64);

void clmpz_mod_limb(clmp_limb_t *, const clmp_limb_t *, const clmp_limb_t *);

void clmpz_mod(clmpz_ptr, clmpz_srcptr, clmpz_srcptr);
void clmpz_mod_ui(clmpz_ptr, clmpz_srcptr, clmp_uint32);
void clmpz_mod_ul(clmpz_ptr, clmpz_srcptr, clmp_uint64);

void clmpz_accum_mul_add(clmpz_ptr, clmpz_srcptr, clmp_uint64);
clmp_uint64 clmpz_mod_ul_to_ul(clmpz_srcptr, clmp_uint64);

#endif
